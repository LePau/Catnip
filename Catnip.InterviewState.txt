/*
After catching your classroom students cheating before, you realize your students are getting craftier and hiding words in 2D grids of letters. The word may start anywhere in the grid, and consecutive letters can be either immediately below or immediately to the right of the previous letter.

Given a grid and a word, write a function that returns the location of the word in the grid as a list of coordinates. If there are multiple matches, return any one.
grid1 = [
  ['c', 'c', 'x', 't', 'i', 'b'],
  ['c', 'c', 'a', 't', 'n', 'i'],
  ['a', 'c', 'n', 'n', 't', 't'],
  ['t', 'c', 's', 'i', 'p', 't'],
  ['a', 'o', 'o', 'o', 'a', 'a'],
  ['o', 'a', 'a', 'a', 'o', 'o'],
  ['k', 'a', 'i', 'c', 'k', 'i'],
]
word1 = "catnip"
word2 = "cccc"
word3 = "s"
word4 = "bit"
word5 = "aoi"
word6 = "ki"
word7 = "aaa"
word8 = "ooo"

grid2 = [['a']]
word9 = "a"

find_word_location(grid1, word1) => [ (1, 1), (1, 2), (1, 3), (2, 3), (3, 3), (3, 4) ]
find_word_location(grid1, word2) =>
       [(0, 1), (1, 1), (2, 1), (3, 1)]
    OR [(0, 0), (1, 0), (1, 1), (2, 1)]
    OR [(0, 0), (0, 1), (1, 1), (2, 1)]
    OR [(1, 0), (1, 1), (2, 1), (3, 1)]
find_word_location(grid1, word3) => [(3, 2)]
find_word_location(grid1, word4) => [(0, 5), (1, 5), (2, 5)]
find_word_location(grid1, word5) => [(4, 5), (5, 5), (6, 5)]
find_word_location(grid1, word6) => [(6, 4), (6, 5)]
find_word_location(grid1, word7) => [(5, 1), (5, 2), (5, 3)]
find_word_location(grid1, word8) => [(4, 1), (4, 2), (4, 3)]
find_word_location(grid2, word9) => [(0, 0)]

Complexity analysis variables:

r = number of rows
c = number of columns
w = length of the word
*/


using System;
using System.Collections.Generic;
using System.Linq;

class Solution {

    class Coordinate {
      public Coordinate(int x, int y)
      {
        this.x = x;
        this.y = y;
      }
      public int x = 0;
      public int y = 0;
    }

    static List<Coordinate> FindCoordinatesAt(char[][] grid, string word, int x, int y, List<Coordinate> coordinates)
    {
      // TODO: check constraints

      if (word[0] == grid[x][y]) {
        coordinates.Add(new Coordinate)
      }
      var coordinatesXPlus1 = FindCoordinatesAt(grid, word, x+1, y);
      var coordinatesYPlus1 = FindCoordinatesAt(grid, word, x, y+1);
      if ()
      var 
    }

    static List<Coordinate>FindCoordinates(char[][] grid, string word)
    {
       int x = 0;
       int y = 0;
       int i = 0;

       List<Coordinate> coordinates = new List<Coordinate>();

       while (i < word.Length && y < grid.Length)
       {
         if (x > grid[y].Length)
         {
           x = 0;
           y = y + 1;
         }

         // c
         // TODO: look for out of bounds
         var charAtWord = word[i];
         var charAtCoordinates = grid[x][y];
         var charAheadXCoordinates = grid[x+1][y];
         var charAheadYCoordinates = grid[x][y+1];


         if (x > grid[y].Length)
         {
           x = 0;
           y = y + 1;
         }

         // c
         // TODO: look for out of bounds
         var charAtWord = word[i];
         var charAtCoordinates = grid[x][y];
         var charAheadXCoordinates = grid[x+1][y];
         var charAheadYCoordinates = grid[x][y+1];

         if (charAtWord == charAtCoordinates || charAtWord == charAheadXCoordinates || charAtWord == charAheadYCoordinates)
         {
           coordinates.Add(new Coordinate(x, y));
           i++;
         }
         else
         {
           i = 0;
           coordinates.Clear();
         }

         x++;


       }

       return coordinates;

    }

    static void Main(String[] args) {
      char[][] grid1 = new [] {
        new [] {'c', 'c', 'x', 't', 'i', 'b'},
        new [] {'c', 'c', 'a', 't', 'n', 'i'},
        new [] {'a', 'c', 'n', 'n', 't', 't'},
        new [] {'t', 'c', 's', 'i', 'p', 't'},
        new [] {'a', 'o', 'o', 'o', 'a', 'a'},
        new [] {'o', 'a', 'a', 'a', 'o', 'o'},
        new [] {'k', 'a', 'i', 'c', 'k', 'i'}
      };
      string word1 = "catnip";
      string word2 = "cccc";
      string word3 = "s";
      string word4 = "bit";
      string word5 = "aoi";
      string word6 = "ki";
      string word7 = "aaa";
      string word8 = "ooo"; 

      char[][] grid2 = new []{ new []{'a'} };
      string word9 = "a";

      FindCoordinates(grid1, word1);
      FindCoordinates(grid1, word2);
      FindCoordinates(grid1, word3);
      FindCoordinates(grid1, word4);
      FindCoordinates(grid1, word5);
      FindCoordinates(grid1, word6);
      FindCoordinates(grid1, word7);
      FindCoordinates(grid1, word8);

      FindCoordinates(grid2, word9);


    }
}
